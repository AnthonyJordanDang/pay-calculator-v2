[{"/home/anthony/Documents/Programming/projects/pay-calculator/src/index.tsx":"1","/home/anthony/Documents/Programming/projects/pay-calculator/src/App.tsx":"2","/home/anthony/Documents/Programming/projects/pay-calculator/src/models.tsx":"3","/home/anthony/Documents/Programming/projects/pay-calculator/src/utility/helper.tsx":"4"},{"size":868,"mtime":1612914610521,"results":"5","hashOfConfig":"6"},{"size":6991,"mtime":1612901813832,"results":"7","hashOfConfig":"6"},{"size":359,"mtime":1612756042663,"results":"8","hashOfConfig":"6"},{"size":1518,"mtime":1612846229172,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"hjqiu0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"/home/anthony/Documents/Programming/projects/pay-calculator/src/index.tsx",[],["22","23"],"/home/anthony/Documents/Programming/projects/pay-calculator/src/App.tsx",["24","25","26","27","28","29","30","31"],"import React, { useState } from \"react\";\nimport \"./scss/main.scss\";\nimport {\n    timeObject,\n    initTimeState,\n    timeStatsObject,\n    initTimeStats,\n} from \"models\";\nimport {\n    calcDuration,\n    replaceItemAtIndex,\n    removeItemAtIndex,\n} from \"utility/helper\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n    RecoilRoot,\n    atom,\n    selector,\n    useRecoilState,\n    useRecoilValue,\n    useSetRecoilState,\n} from \"recoil\";\n\nimport \"date-fns\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nimport Button from \"@material-ui/core/Button\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Divider } from \"@material-ui/core\";\n\nconst timeState = atom({\n    key: \"timeState\",\n    default: [initTimeState],\n});\n\nconst timeRateState = atom({\n    key: \"timeRateState\",\n    default: 14,\n});\n\nconst timeStatsState = selector({\n    key: \"timeStatsState\",\n    get: ({ get }) => {\n        const shiftList = get(timeState);\n        const rate = get(timeRateState);\n        const totalDuration = shiftList.reduce(\n            (accum, current) =>\n                accum +\n                calcDuration(\n                    current.startTime.toLocaleTimeString(),\n                    current.endTime.toLocaleTimeString(),\n                    rate\n                ),\n            0\n        );\n\n        return {\n            total: totalDuration,\n        };\n    },\n});\n\nfunction TotalPay() {\n    const timeStats = useRecoilValue(timeStatsState);\n    return (\n        <h1 className=\"--title-amount\">\n            {\" \"}\n            $ {timeStats.total.toFixed(2)}{\" \"}\n        </h1>\n    );\n}\n\nfunction ShiftList() {\n    const shiftList = useRecoilValue(timeState);\n\n    return (\n        <div className=\"list\">\n            {shiftList.map((shiftItem) => (\n                <div className=\"--list-row\">\n                    <ShiftListItem key={shiftItem.id} item={shiftItem} />\n                    <div className=\"--list-item-divider\">\n                        <Divider />\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nfunction TimeRate() {\n    const [timeRateInput, setTimeRateInput] = useRecoilState(timeRateState);\n    const setTimeRate = useSetRecoilState(timeRateState);\n\n    const editRate = (e: any) => {\n        console.log(\"this is the value of the rate \" + e.target.value);\n        console.log(\"this is the current value of the rate \" + timeRateInput);\n        let new_rate: number = parseInt(e.target.value);\n        if (isNaN(new_rate)) {\n            new_rate = 0;\n        }\n\n        setTimeRate(new_rate);\n    };\n\n    return (\n        <div className=\"input-rate\">\n            {isNaN(timeRateInput) ? (\n                <TextField\n                    error\n                    id=\"outlined-error\"\n                    label=\"Please enter valid rate\"\n                    defaultValue=\"0\"\n                    onChange={editRate}\n                    value={timeRateInput}\n                    variant=\"outlined\"\n                />\n            ) : (\n                <TextField\n                    id=\"filled-basic\"\n                    label=\"$/hour\"\n                    variant=\"filled\"\n                    name=\"rate\"\n                    onChange={editRate}\n                    value={timeRateInput}\n                />\n            )}\n        </div>\n    );\n}\n\nfunction AddTime() {\n    const [timeStateInput, setTimeStateInput] = useState(initTimeState);\n    const setTimeList = useSetRecoilState(timeState);\n    const [shiftList, setShiftList] = useRecoilState(timeState);\n\n    const addTime = () => {\n        console.log(timeState);\n        setTimeList((oldTimeList) => [\n            ...oldTimeList,\n            {\n                id: uuidv4(),\n                startTime: new Date(),\n                endTime: new Date(),\n            },\n        ]);\n        setTimeStateInput(initTimeState);\n    };\n\n    return (\n        <Button variant=\"contained\" color=\"primary\" onClick={addTime}>\n            Add\n        </Button>\n    );\n}\n\ninterface ShiftListItemProps {\n    key: string;\n    item: timeObject;\n}\n\nfunction ShiftListItem({ key, item }: ShiftListItemProps) {\n    const [shiftList, setShiftList] = useRecoilState(timeState);\n    const index = shiftList.findIndex(\n        (shiftItem: timeObject) => shiftItem === item\n    );\n\n    const editShiftItemTime = (timeDesc: string, event: any) => {\n        console.log(shiftList);\n        const newList = replaceItemAtIndex(shiftList, index, {\n            ...item,\n            [timeDesc]: event,\n        });\n\n        setShiftList(newList);\n    };\n\n    const deleteShiftItem = (e: any) => {\n        console.log(\"gang\");\n        console.log(e.target.id);\n        const newList = removeItemAtIndex(shiftList, index);\n        setShiftList(newList);\n    };\n\n    return (\n        <div className=\"--list-item\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <div className=\"--list-item-time\">\n                    <KeyboardTimePicker\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        label=\"Start Time\"\n                        value={item.startTime}\n                        onChange={(event) =>\n                            editShiftItemTime(\"startTime\", event)\n                        }\n                        KeyboardButtonProps={{\n                            \"aria-label\": \"change time\",\n                        }}\n                    />\n                </div>\n\n                <div className=\"--list-item-time\">\n                    <KeyboardTimePicker\n                        margin=\"normal\"\n                        id=\"time-picker\"\n                        name=\"endTime\"\n                        label=\"End Time\"\n                        value={item.endTime}\n                        onChange={(event) =>\n                            editShiftItemTime(\"endTime\", event)\n                        }\n                        KeyboardButtonProps={{\n                            \"aria-label\": \"change time\",\n                        }}\n                    />\n                </div>\n            </MuiPickersUtilsProvider>\n\n            <div className=\"--list-item-delete\">\n                <IconButton onClick={deleteShiftItem}>\n                    <CloseIcon />\n                </IconButton>\n            </div>\n        </div>\n    );\n}\n\nfunction App() {\n    return (\n        <RecoilRoot>\n            <div id=\"container\" className=\"App\">\n                <div className=\"amount\">\n                    <TotalPay />\n                </div>\n                <div className=\"options\">\n                    <AddTime />\n                    <TimeRate />\n                </div>\n                <ShiftList />\n            </div>\n        </RecoilRoot>\n    );\n}\n\nexport default App;\n","/home/anthony/Documents/Programming/projects/pay-calculator/src/models.tsx",[],"/home/anthony/Documents/Programming/projects/pay-calculator/src/utility/helper.tsx",["32","33","34","35"],"import {timeObject} from 'models';\n\n\n//calculates the duration in hours\nexport const calcDuration = (\n    start: string,\n    end: string,\n    rate: number,\n\n): number => {\n    //special case: works evening past midnight\n    let startHour: number = parseInt(start.substr(0,2),10);\n    let startMin: number = parseInt(start.substr(3,5),10);\n    let startPeriod: string = start.substr(9,11);\n\n    let endHour: number = parseInt(end.substr(0,2),10);\n    let endMin: number = parseInt(end.substr(3,5),10);\n    let endPeriod: string = end.substr(9,11);\n    console.log(start);\n    console.log(\"this is the startPeriod \" + startPeriod);\n\n    console.log(\"this is the endPeriod \" + endPeriod);\n\n    if(startPeriod==\"pm\"&&endPeriod==\"am\") {\n        if(endHour<12) {\n            endHour+=12;\n        }\n    }\n    else {\n        if(startPeriod==\"pm\") {\n            startHour+=12;\n        }\n        if(endPeriod==\"pm\") {\n            endHour+=12;\n        }\n    }\n\n    let startInMinutes: number = (startHour*60)+startMin;\n    let endInMinutes: number = (endHour*60)+endMin;\n\n    let duration: number = (endInMinutes-startInMinutes)/60;\n    let cost: number = Number((duration*rate).toFixed(2));\n    return cost;\n}\n\nexport function replaceItemAtIndex(\n    arr: timeObject[],\n    index: number,\n    newValue: timeObject\n) {\n    return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nexport function removeItemAtIndex(arr: timeObject[], index: number) {\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n\n",["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":6,"column":5,"nodeType":"44","messageId":"45","endLine":6,"endColumn":20},{"ruleId":"42","severity":1,"message":"46","line":7,"column":5,"nodeType":"44","messageId":"45","endLine":7,"endColumn":18},{"ruleId":"42","severity":1,"message":"47","line":31,"column":5,"nodeType":"44","messageId":"45","endLine":31,"endColumn":23},{"ruleId":"42","severity":1,"message":"48","line":37,"column":8,"nodeType":"44","messageId":"45","endLine":37,"endColumn":18},{"ruleId":"42","severity":1,"message":"49","line":102,"column":27,"nodeType":"44","messageId":"45","endLine":102,"endColumn":43},{"ruleId":"42","severity":1,"message":"50","line":143,"column":12,"nodeType":"44","messageId":"45","endLine":143,"endColumn":26},{"ruleId":"42","severity":1,"message":"51","line":145,"column":12,"nodeType":"44","messageId":"45","endLine":145,"endColumn":21},{"ruleId":"42","severity":1,"message":"52","line":145,"column":23,"nodeType":"44","messageId":"45","endLine":145,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":24,"column":19,"nodeType":"55","messageId":"56","endLine":24,"endColumn":21},{"ruleId":"53","severity":1,"message":"54","line":24,"column":36,"nodeType":"55","messageId":"56","endLine":24,"endColumn":38},{"ruleId":"53","severity":1,"message":"54","line":30,"column":23,"nodeType":"55","messageId":"56","endLine":30,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":33,"column":21,"nodeType":"55","messageId":"56","endLine":33,"endColumn":23},{"ruleId":"38","replacedBy":"57"},{"ruleId":"40","replacedBy":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"@typescript-eslint/no-unused-vars","'timeStatsObject' is defined but never used.","Identifier","unusedVar","'initTimeStats' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'Typography' is defined but never used.","'setTimeRateInput' is assigned a value but never used.","'timeStateInput' is assigned a value but never used.","'shiftList' is assigned a value but never used.","'setShiftList' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["59"],["60"],"no-global-assign","no-unsafe-negation"]