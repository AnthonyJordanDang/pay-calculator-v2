{"version":3,"sources":["models.tsx","App.tsx","utility/helper.tsx","index.tsx"],"names":["initTimeState","id","uuidv4","startTime","Date","endTime","timeState","atom","key","default","timeRateState","timeStatsState","selector","get","shiftList","rate","total","reduce","accum","current","start","end","startHour","parseInt","substr","startMin","endHour","endMin","console","log","rate_num","Number","parseFloat","toFixed","isNaN","calcDuration","toLocaleTimeString","TotalPay","timeStats","useRecoilValue","className","ShiftList","map","shiftItem","ShiftListItem","item","Divider","TimeRate","useRecoilState","timeRateInput","setTimeRate","useSetRecoilState","invalid","editRate","e","new_rate","target","value","TextField","error","label","defaultValue","onChange","variant","name","AddTime","useState","setTimeStateInput","setTimeList","Button","color","onClick","oldTimeList","setShiftList","index","findIndex","editShiftItemTime","timeDesc","event","newList","arr","newValue","slice","replaceItemAtIndex","utils","DateFnsUtils","margin","KeyboardButtonProps","IconButton","removeItemAtIndex","App","ReactDOM","rel","href","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.0e4ed92e.chunk.js","sourcesContent":["import {v4 as uuidv4} from \"uuid\";\n\nexport interface timeObject {\n    id: string\n    startTime: Date\n    endTime: Date\n}\n\nexport const initTimeState : timeObject = {\n    id: uuidv4(),\n    startTime: new Date(\"October 13, 2014 12:00:00\"),\n    endTime: new Date(\"October 13, 2014 12:00:00\"),\n}\n\nexport interface timeStatsObject {\n    total: number\n}\n\nexport const initTimeStats: timeStatsObject = {\n    total:0,\n}\n\n","import React, { useState } from \"react\";\nimport \"./scss/main.scss\";\nimport {\n    timeObject,\n    initTimeState,\n    timeStatsObject,\n    initTimeStats,\n} from \"models\";\nimport {\n    calcDuration,\n    replaceItemAtIndex,\n    removeItemAtIndex,\n} from \"utility/helper\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport {\n    RecoilRoot,\n    atom,\n    selector,\n    useRecoilState,\n    useRecoilValue,\n    useSetRecoilState,\n} from \"recoil\";\n\nimport \"date-fns\";\n\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardTimePicker,\n    KeyboardDatePicker,\n} from \"@material-ui/pickers\";\n\nimport Button from \"@material-ui/core/Button\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Divider } from \"@material-ui/core\";\n\nconst timeState = atom({\n    key: \"timeState\",\n    default: [initTimeState],\n});\n\nconst timeRateState = atom({\n    key: \"timeRateState\",\n    default: \"14\",\n});\n\nconst timeStatsState = selector({\n    key: \"timeStatsState\",\n    get: ({ get }) => {\n        const shiftList = get(timeState);\n        const rate = get(timeRateState);\n        const totalDuration = shiftList.reduce(\n            (accum, current) =>\n                accum +\n                calcDuration(\n                    current.startTime.toLocaleTimeString(),\n                    current.endTime.toLocaleTimeString(),\n                    rate\n                ),\n            0\n        );\n\n        return {\n            total: totalDuration,\n        };\n    },\n});\n\nfunction TotalPay() {\n    const timeStats = useRecoilValue(timeStatsState);\n    return <h1 className=\"--title-amount\"> $ {timeStats.total.toFixed(2)} </h1>;\n}\n\nfunction ShiftList() {\n    const shiftList = useRecoilValue(timeState);\n\n    return (\n        <div className=\"list\">\n            {shiftList.map((shiftItem) => (\n                <div className=\"--list-row\">\n                    <ShiftListItem key={shiftItem.id} item={shiftItem} />\n                    <div className=\"--list-item-divider\">\n                        <Divider />\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nfunction TimeRate() {\n    const [timeRateInput, setTimeRateInput] = useRecoilState(timeRateState);\n    const setTimeRate = useSetRecoilState(timeRateState);\n    let invalid: boolean = false;\n\n    const editRate = (e: any) => {\n\n        let new_rate : string = e.target.value;\n\n        if(isNaN(parseFloat(e.target.value))) {\n            invalid = true;\n            console.log(\"invalid input\");\n        }\n\n        setTimeRate(new_rate);\n\n\n\n\n        console.log(\"this is the value of the rate \" + e.target.value);\n        console.log(\"this is the current value of the state \" + timeRateInput);\n\n        //let new_rate: number = parseInt(e.target.value);\n        //if (isNaN(new_rate)) {\n        //    new_rate = 0;\n        //}\n\n        //setTimeRate(new_rate);\n    };\n\n    return (\n        <div className=\"input-rate\">\n            {invalid ? (\n                <TextField\n                    error\n                    id=\"outlined-error\"\n                    label=\"Please enter valid rate\"\n                    defaultValue=\"\"\n                    onChange={editRate}\n                    value=\"\"\n                    variant=\"outlined\"\n                />\n            ) : (\n                <TextField\n                    id=\"filled-basic\"\n                    label=\"$/hour\"\n                    variant=\"filled\"\n                    name=\"rate\"\n                    onChange={editRate}\n                    value={timeRateInput}\n                />\n            )}\n        </div>\n    );\n}\n\nfunction AddTime() {\n    const [timeStateInput, setTimeStateInput] = useState(initTimeState);\n    const setTimeList = useSetRecoilState(timeState);\n    const [shiftList, setShiftList] = useRecoilState(timeState);\n\n    const addTime = () => {\n        console.log(timeState);\n        setTimeList((oldTimeList) => [\n            ...oldTimeList,\n            {\n                id: uuidv4(),\n                startTime: new Date(\"October 13, 2014 12:00:00\"),\n                endTime: new Date(\"October 13, 2014 12:00:00\"),\n            },\n        ]);\n        setTimeStateInput(initTimeState);\n    };\n\n    return (\n        <Button variant=\"contained\" color=\"primary\" onClick={addTime}>\n            Add\n        </Button>\n    );\n}\n\ninterface ShiftListItemProps {\n    key: string;\n    item: timeObject;\n}\n\nfunction ShiftListItem({ key, item }: ShiftListItemProps) {\n    const [shiftList, setShiftList] = useRecoilState(timeState);\n    const index = shiftList.findIndex(\n        (shiftItem: timeObject) => shiftItem === item\n    );\n\n    const editShiftItemTime = (timeDesc: string, event: any) => {\n        console.log(shiftList);\n        const newList = replaceItemAtIndex(shiftList, index, {\n            ...item,\n            [timeDesc]: event,\n        });\n\n        setShiftList(newList);\n    };\n\n    const deleteShiftItem = (e: any) => {\n        console.log(\"gang\");\n        console.log(e.target.id);\n        const newList = removeItemAtIndex(shiftList, index);\n        setShiftList(newList);\n    };\n\n    return (\n        <div className=\"--list-item\">\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <div className=\"--list-item-times\">\n                    <div className=\"--list-item-time\">\n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            label=\"Start Time\"\n                            value={item.startTime}\n                            onChange={(event) =>\n                                editShiftItemTime(\"startTime\", event)\n                            }\n                            KeyboardButtonProps={{\n                                \"aria-label\": \"change time\",\n                            }}\n                        />\n                    </div>\n\n                    <div className=\"--list-item-time\">\n                        <KeyboardTimePicker\n                            margin=\"normal\"\n                            id=\"time-picker\"\n                            name=\"endTime\"\n                            label=\"End Time\"\n                            value={item.endTime}\n                            onChange={(event) =>\n                                editShiftItemTime(\"endTime\", event)\n                            }\n                            KeyboardButtonProps={{\n                                \"aria-label\": \"change time\",\n                            }}\n                        />\n                    </div>\n                </div>\n            </MuiPickersUtilsProvider>\n\n            <div className=\"--list-item-delete\">\n                <IconButton onClick={deleteShiftItem}>\n                    <CloseIcon />\n                </IconButton>\n            </div>\n        </div>\n    );\n}\n\nfunction App() {\n    return (\n        <RecoilRoot>\n            <div id=\"container\" className=\"App\">\n                <div className=\"amount\">\n                    <TotalPay />\n                </div>\n                <div className=\"options\">\n                    <AddTime />\n                    <TimeRate />\n                </div>\n                <ShiftList />\n            </div>\n        </RecoilRoot>\n    );\n}\n\nexport default App;\n","import {timeObject} from 'models';\n\n\n//calculates the duration in hours\nexport const calcDuration = (\n    start: string,\n    end: string,\n    rate: string,\n\n): number => {\n    //special case: works evening past midnight\n    let startHour: number = parseInt(start.substr(0,2),10);\n    let startMin: number = parseInt(start.substr(3,5),10);\n\n    let endHour: number = parseInt(end.substr(0,2),10);\n    let endMin: number = parseInt(end.substr(3,5),10);\n    console.log(start);\n\n    if(startHour>=12&&endHour<12) {\n        if(endHour<12) {\n            endHour+=24;\n        }\n    }\n\n    let rate_num: number = Number(parseFloat(rate).toFixed(2));\n    if(isNaN(rate_num)) {\n        rate_num=0;\n    }\n\n    let startInMinutes: number = (startHour*60)+startMin;\n    let endInMinutes: number = (endHour*60)+endMin;\n\n    let duration: number = (endInMinutes-startInMinutes)/60;\n    let cost: number = Number((duration*rate_num).toFixed(2));\n    return cost;\n}\n\nexport function replaceItemAtIndex(\n    arr: timeObject[],\n    index: number,\n    newValue: timeObject\n) {\n    return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nexport function removeItemAtIndex(arr: timeObject[], index: number) {\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./scss/main.scss\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n        />\n        <link\n            rel=\"stylesheet\"\n            href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n        />\n        <Router basename={process.env.PUBLIC_URL}>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}